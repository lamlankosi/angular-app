import { ViewContainerRef } from '@angular/core';
import { Component, Injectable, inject } from '@angular/core';
import { BaseComponentWrapper, _removeFromParent } from 'ag-grid-community';
import * as i0 from "@angular/core";
// To speed up the removal of custom components we create a number of shards to contain them.
// Removing a single component calls a function within Angular called removeFromArray.
// This is a lot faster if the array is smaller.
export class AgComponentContainer {
    constructor() {
        this.vcr = inject(ViewContainerRef);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.12", ngImport: i0, type: AgComponentContainer, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.12", type: AgComponentContainer, selector: "ag-component-container", ngImport: i0, template: '', isInline: true }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.12", ngImport: i0, type: AgComponentContainer, decorators: [{
            type: Component,
            args: [{
                    selector: 'ag-component-container',
                    template: '',
                }]
        }] });
const NUM_SHARDS = 16;
let shardIdx = 0;
function createComponentContainers(vcr) {
    const containerMap = new Map();
    for (let i = 0; i < NUM_SHARDS; i++) {
        const container = vcr.createComponent(AgComponentContainer);
        containerMap.set(i, container);
        _removeFromParent(container.location.nativeElement);
    }
    return containerMap;
}
export class AngularFrameworkComponentWrapper extends BaseComponentWrapper {
    setViewContainerRef(viewContainerRef, angularFrameworkOverrides) {
        this.viewContainerRef = viewContainerRef;
        this.angularFrameworkOverrides = angularFrameworkOverrides;
    }
    createWrapper(OriginalConstructor) {
        const angularFrameworkOverrides = this.angularFrameworkOverrides;
        const that = this;
        that.compShards ??= createComponentContainers(this.viewContainerRef);
        class DynamicAgNg2Component extends BaseGuiComponent {
            init(params) {
                angularFrameworkOverrides.runInsideAngular(() => {
                    super.init(params);
                    this._componentRef.changeDetectorRef.detectChanges();
                });
            }
            createComponent() {
                return that.createComponent(OriginalConstructor);
            }
            hasMethod(name) {
                return wrapper.getFrameworkComponentInstance()[name] != null;
            }
            callMethod(name, args) {
                const componentRef = this.getFrameworkComponentInstance();
                const methodCall = componentRef[name];
                // Special case for `doesFilterPass` as it's called very often and current implementation has
                // this filter logic as part of the component when really it is just part of the filter model.
                if (name === 'doesFilterPass') {
                    return methodCall.apply(componentRef, args);
                }
                return angularFrameworkOverrides.runInsideAngular(() => methodCall.apply(componentRef, args));
            }
            addMethod(name, callback) {
                wrapper[name] = callback;
            }
        }
        const wrapper = new DynamicAgNg2Component();
        return wrapper;
    }
    createComponent(componentType) {
        shardIdx = (shardIdx + 1) % NUM_SHARDS;
        const container = this.compShards.get(shardIdx);
        return container.instance.vcr.createComponent(componentType);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.12", ngImport: i0, type: AngularFrameworkComponentWrapper, deps: null, target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.12", ngImport: i0, type: AngularFrameworkComponentWrapper }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.12", ngImport: i0, type: AngularFrameworkComponentWrapper, decorators: [{
            type: Injectable
        }] });
class BaseGuiComponent {
    init(params) {
        this._params = params;
        this._componentRef = this.createComponent();
        this._agAwareComponent = this._componentRef.instance;
        this._frameworkComponentInstance = this._componentRef.instance;
        this._eGui = this._componentRef.location.nativeElement;
        // Angular appends the component to the DOM, so remove it
        _removeFromParent(this._eGui);
        this._agAwareComponent.agInit(this._params);
    }
    getGui() {
        return this._eGui;
    }
    /** `getGui()` returns the `ng-component` element. This returns the actual root element. */
    getRootElement() {
        const firstChild = this._eGui.firstChild;
        return firstChild;
    }
    destroy() {
        if (this._frameworkComponentInstance && typeof this._frameworkComponentInstance.destroy === 'function') {
            this._frameworkComponentInstance.destroy();
        }
        this._componentRef?.destroy();
    }
    getFrameworkComponentInstance() {
        return this._frameworkComponentInstance;
    }
}
//# sourceMappingURL=data:application/json;base64,